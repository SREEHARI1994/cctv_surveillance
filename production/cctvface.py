# -*- coding: utf-8 -*-
"""nanoface.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RLsP9mCsLumG2ymKhjvn6CcSGXTqGzDw
"""

import face_recognition
import cv2
import Jetson.GPIO as GPIO
import time
import os
from multiprocessing import Process


def alarm():
    GPIO.setmode(GPIO.BOARD)
    GPIO.setwarnings(True)
    GPIO.setup(23,GPIO.OUT)
    try:
        print ("LED on")
        GPIO.output(23,GPIO.HIGH)
        time.sleep(3)

        #print ("LED off")
        GPIO.output(23,GPIO.LOW)
        GPIO.cleanup()
    except:
        KeyboardInterrupt

#from firebase import firebase
#firebase = firebase.FirebaseApplication('https://your_storage.firebaseio.com', None)

# This is a demo of running face recognition on live video from your webcam. It's a little more complicated than the
# other example, but it includes some basic performance tweaks to make things run a lot faster:
#   1. Process each video frame at 1/4 resolution (though still display it at full resolution)
#   2. Only detect faces in every other frame of video.

# PLEASE NOTE: This example requires OpenCV (the `cv2` library) to be installed only to read from your webcam.
# OpenCV is *not* required to use the face_recognition library. It's only required if you want to run this
# specific demo. If you have trouble installing it, try any of the other demos that don't require it instead.

# Get a reference to webcam #0 (the default one)
#video_capture = cv2.VideoCapture(0)
#video_capture=cv2.VideoCapture('rtsp://admin:admin1234@192.168.1.3/ch1/main/av_stream')
# Load a sample picture and learn how to recognize it.
obama_image = face_recognition.load_image_file("/home/sreehari/Desktop/project/hashim.jpg")
obama_face_encoding = face_recognition.face_encodings(obama_image)[0]

# Load a second sample picture and learn how to recognize it.
biden_image = face_recognition.load_image_file("/home/sreehari/Desktop/project/sree.jpg")
biden_face_encoding = face_recognition.face_encodings(biden_image)[0]

# Create arrays of known face encodings and their names
known_face_encodings = [
    obama_face_encoding,
    biden_face_encoding
]
known_face_names = [
    "hashim",
    "sreehari"
]

# Initialize some variables
face_locations = []
face_encodings = []
face_names = []
process_this_frame = True
if __name__ == "__main__":
	p = Process(target=alarm)
	while True:
    # Grab a single frame of video
		
		video_capture=cv2.VideoCapture('rtsp://admin:admin1234@192.168.1.3/ch1/main/av_stream')
		#if video_capture:
			#print("got video")
		ret, frame = video_capture.read()
		#if frame.any():
			#print("got frame")
		frame = cv2.resize(frame, (1280, 720))	
	
    # Resize frame of video to 1/4 size for faster face recognition processing
		#small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
		small_frame=frame
		

    # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
		rgb_small_frame = small_frame[:, :, ::-1]
		#rgb_small_frame = small_frame
		#if rgb_small_frame.any():
			#print("yes rgb")
		#else:
			#print("no rgb")
	#rgb_small_frame=small_frame

    # Only process every other frame of video to save time
	#if process_this_frame:
        # Find all the faces and face encodings in the current frame of video
		face_locations = face_recognition.face_locations(rgb_small_frame)
		if face_locations:
			print("face locations detected")
		
		face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)
		if face_encodings:
			print("detecting a face")
		else:
			print("no face detected")
        #face_names = []
		for face_encoding in face_encodings:
            # See if the face is a match for the known face(s)
			matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
			name = "Unknown"

            # If a match was found in known_face_encodings, just use the first one.
			if True in matches:
				first_match_index = matches.index(True)
				name = known_face_names[first_match_index]
				print(name)
            
			else:
				print("BURGLER DETECTED")
				if (not (p.is_alive())):
					p = Process(target=alarm)
					p.start()
                  
                  
				          
              

            #face_names.append(name)
	#process_this_frame = not process_this_frame
		key = cv2.waitKey(1)
		if key & 0xFF == ord('q'):
			break
        
		time.sleep(0.68958513)


    

# Release handle to the webcam
video_capture.release()
cv2.destroyAllWindows()
GPIO.cleanup()
